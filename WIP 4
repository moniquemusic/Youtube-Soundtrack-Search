#setup
require(curl)
require(jsonlite)
library(dplyr)

get_JSON <- function(x){fromJSON(x)}

#search api
#basic search url API
yt_search <- "https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&order=relevance&publishedBefore=%s%%3A00%%3A00Z&q=%s+soundtrack+full+-cover+-radio&type=video&videoDuration=long&key=%s"

#function to paste elements into the search API url
create_search_url <- function(x) {paste0(sprintf(yt_search, "2016-06-24T00", x, "AIzaSyCPOy2cpD0SOXEfGDoc2v0riFqtSQ172ow"))}

#create_search_url <- function(x, y) {paste0(sprintf(yt_search, y, x, "AIzaSyCPOy2cpD0SOXEfGDoc2v0riFqtSQ172ow"))}



#list of game titles from 2016
games <- c('overwatch', 'witcher 3', 'dark souls', 'pony island')
#replace spaces with "+" so it works within the url
games <- gsub(pattern=" ", replacement= "+", x=games)

#create list of search API urls from the list of games
search_url_list <- sapply(games, create_search_url)
search_url_list_2 <- lapply(games, create_search_url)

#getting JSON data from each search API url inquiry
search_JSON <- sapply(search_url_list, get_JSON)
search_JSON_spread <-lapply(search_url_list_2, get_JSON)

#creating dataframe for collect JSON
search_JSON_df <- data.frame(search_JSON)
View(search_JSON_df)

search_JSON_spread_df <-data.frame(search_JSON_spread)
View(search_JSON_spread_df)

search_JSON_spread <-data.frame(search_JSON_spread)
View(search_JSON_spread)
#stats api, same as search API but using videoID from search_JSON_df

yt_stat_search <- "https://www.googleapis.com/youtube/v3/videos?part=statistics&id=%s&key=%s"

create_stats_url <-function(x) {paste0(sprintf(yt_stat_search, x, "AIzaSyCPOy2cpD0SOXEfGDoc2v0riFqtSQ172ow"))}

#create list of videoID
video_id_list <-search_JSON_spread$items.id$videoId

video_title <-search_JSON_spread$items.snippet$title

#create dataframe with video_title and video_id
video_id_df <- data.frame(video_title, video_id_list)
View(video_id_df)

stats_url_list <- sapply(video_id_list, create_stats_url)

stats_JSON <- sapply(stats_url_list, get_JSON)
#transposing database to have videos in rows and video stats in columns
stats_JSON <-t(stats_JSON)

stats_JSON_df <- data.frame(stats_JSON)
View(stats_JSON_df)

#use the title column from video_id_df as the row names for stats_JSON_df

#create games list
thepage <- readLines("http://www.metacritic.com/browse/games/score/metascore/year/pc/filtered")

find_title <- function(x){thepage[26*(x-1)+580]}

find_date <- function(x){thepage[26*(x-1)+590]}

top_100_games <- c(1:100)

game_title <- sapply(top_100_games, find_title)

game_date <- sapply(top_100_games, find_date)

#count relevent videos
grepl(pattern="Soundtrack", x= video_id_df$video_title)
overwatch_count <- grepl(pattern="Soundtrack", x= video_id_df$video_title)
sum(overwatch_count, na.rm=TRUE)

#find relevent videos
target_videos <- grep(pattern="Soundtrack", x= video_id_df$video_title)
target_videos_df <- data.frame(video_id_df$video_title[target_videos], video_id_df$video_id_list[target_videos])
View(target_videos_df)

#get stats for just target_videos
target_stats_url_list <- sapply(video_id_list[target_videos], create_stats_url)
target_stats_JSON <-sapply(target_stats_url_list, get_JSON)
target_stats_JSON_df <-data.frame(target_stats_JSON)
View(target_stats_JSON_df)
